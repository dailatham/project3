// testreader.cpp

#include "Ref.h"
#include "Verse.h"
#include "Bible.h"
#include <iostream>
#include <fstream>
#include <string>
#include <stdio.h>
#include <stdlib.h>
using namespace std;

int main(int argc, char** argv) {
	// Create Bible object to process the raw text file
	Bible webBible("/home/class/csc3004/Bibles/web-complete");

	Verse verse;
	int b, c, v, NumV, n;
	LookupResult result;

	if (argc == 1) {
		cout << "--------------------------------------------------" << endl;
		cout << "Error: everything is missing" << endl;
		return 34;
	}
	else if (argc == 2) {
		cout << "--------------------------------------------------" << endl;
		cout << "Error: chapter and verse number are missing" << endl;
		return 34;
	}
	else if (argc == 3) {
		cout << "--------------------------------------------------" << endl;
		cout << "Error: verse number is missing" << endl;
		return 34;
	}
/*	else if (argc > 6) {
		cout << "--------------------------------------------------" << endl;
		cerr << "Error: too many arguments" << endl;
		return 34;
	}
*/	b = stoi(argv[1]);
	c = stoi(argv[2]);
	v = stoi(argv[3]);
	n = 0;
	if (argc > 4) {
		n = stoi(argv[4]);
		cout << "n= " << n << endl;
	}

	// Create a reference from the numbers
	Ref ref(b, c, v);
//	int curV = v;		// current verse
//	int finalV = n;	// final or destination verse
	int count = 0;

	// Look up the first verse base on reference and display the result.
	cout << "--------------------------------------------------" << endl;
//	cout << "Result from the original (Bible.lookup) : " << endl;
	verse = webBible.lookup(ref, result);
//	curV++;
	count++; 
	if (!(verse.getRef() == ref)){
		ref.displayNonExisted();
		cout << endl;
		exit(2);
	} else {
		verse.display();
		cout << "\n" << endl;
	}

	// Multi-verse
	while (count < n) {
		//do {
			verse = webBible.nextVerse(result);
			count++;
//			verse.display();
//			cout << "\n" << endl;
 			if (!(verse.getRef() == ref)){
				ref.displayNonExisted();
				cout << endl;
				exit(2);
			} else {
				verse.display();
				cout << "\n" << endl;
			}
	}
}

